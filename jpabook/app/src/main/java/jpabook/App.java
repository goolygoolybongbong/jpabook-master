/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jpabook;

import jpabook.model.entity.*;
import jpabook.model.entity.enums.OrderStatus;
import jpabook.model.entity.item.Album;
import jpabook.model.entity.item.Item;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import java.util.Date;

public class App {
    public static void main(String[] args) {

        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("jpabook");
        EntityManager em = entityManagerFactory.createEntityManager();

        EntityTransaction transaction = em.getTransaction();

        try {
            transaction.begin();
            logic(em);
            objectExplorerText(em);
            saveOrderChainTest(em);
            categoryItemRealtionTest(em);
            transaction.commit();
        } catch (Exception e) {
            e.printStackTrace();
            transaction.rollback();
        } finally {
            em.close();
        }
        entityManagerFactory.close();
    }

    public static void logic(EntityManager em) {
        Item i = new Album();
        i.setName("name");
        i.setPrice(100);
        em.persist(i);

        //em.clear();
    }

    public static void objectExplorerText(EntityManager em) {
        // given
        Item itemPut = new Album();
        //itemPut.setId(1L);
        itemPut.setPrice(1000);
        itemPut.setName("testItem");
        itemPut.setStockQuantity(1000);

        Member memberPut = new Member();
        //memberPut.setId(1L);
        memberPut.setName("test");
        Address mAddress = new Address();
        mAddress.setCity("testCity");
        mAddress.setStreet("testStreet");
        mAddress.setZipcode("testZipcode");
        memberPut.setAddress(mAddress);

        Order orderPut = new Order();
        //orderPut.setId(1L);
        orderPut.setStatus(OrderStatus.ORDER);
        orderPut.setMember(memberPut);
        orderPut.setOrderDate(new Date());

        OrderItem orderItemPut = new OrderItem();
        //orderItemPut.setId(1L);
        orderItemPut.setItem(itemPut);
        orderItemPut.setOrder(orderPut);
        orderItemPut.setOrderPrice(1000);
        orderItemPut.setCount(1);

        // when
        em.persist(itemPut);
        em.persist(memberPut);
        em.persist(orderPut);
        em.persist(orderItemPut);

        em.flush();

        // then
        Long ordId = itemPut.getId();
        Order orderGet = em.find(Order.class, 1L);
        Member memberGet = orderGet.getMember();
        Order orderGetFromMemberGet = memberGet.getOrders().get(0);
        OrderItem orderItemGet = orderGet.getOrderItemList().get(0);
        Item itemGet = orderItemGet.getItem();
    }

    public static void saveOrderChainTest(EntityManager em) {
        Delivery delivery = new Delivery();

        OrderItem orderItem1 = new OrderItem();
        OrderItem orderItem2 = new OrderItem();
        orderItem1.setDelivery(delivery);
        orderItem2.setDelivery(delivery);

        Order order = new Order();
        order.setDelivery(delivery);
        order.addOrderItem(orderItem1);
        order.addOrderItem(orderItem2);

        em.persist(order);
    }

    public static void categoryItemRealtionTest(EntityManager em) {
        Album item1 = new Album();
        item1.setArtist("testArtist");
        item1.setName("testAlbumName");
        item1.setEtc("testEtc");
        item1.setPrice(1000);

        Category category = new Category();
        category.setName("testCategory");

        CategoryItem categoryItem = new CategoryItem();
        categoryItem.setCategory(category);
        categoryItem.setItem(item1);

        em.persist(categoryItem);
    }
}
